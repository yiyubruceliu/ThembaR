{"input":{"ourVersion":"1.19.2","commit":"490ef761b76b3f3b3832eff7a588aac891e5fe80","locale":"en-us","devMode":false,"absoluteFolderPath":"/home/rendani/.vscode/extensions","isBuiltin":false,"mtime":1517216951113},"result":[{"name":"solidity","description":"Ethereum Solidity Language for Visual Studio Code","keywords":["solidity","ethereum","blockchain","compiler","solhint"],"version":"0.0.31","publisher":"JuanBlanco","engines":{"vscode":"^1.15.0"},"contributors":["Juan Blanco"],"bugs":{"url":"https://github.com/juanfranblanco/vscode-solidity/issues"},"icon":"images/icon.png","repository":{"type":"git","url":"https://github.com/juanfranblanco/vscode-solidity"},"categories":["Languages","Snippets"],"activationEvents":["onLanguage:solidity","onCommand:solidity.compile","onCommand:solidity.compile.active","onCommand:solidity.codegen"],"main":"/home/rendani/.vscode/extensions/JuanBlanco.solidity-0.0.31/out/src/extension","scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"dependencies":{"abi-code-gen":"0.0.3","fs-extra":"^4.0.2","read-yaml":"^1.1.0","solc":"^0.4.18","solhint":"^1.1.6","solium":"^0.5.5","truffle-artifactor":"^2.1.4","vscode-languageclient":"^3.3.0","vscode-languageserver":"^3.3.0","solparse":"^1.3.0"},"devDependencies":{"@types/node":"^8.0.46","tslint":"^5.7.0","typescript":"^2.5.3","vscode":"^1.1.6"},"contributes":{"configuration":{"type":"object","title":"Solidity configuration","properties":{"solidity.compileUsingRemoteVersion":{"type":["string","null"],"default":null,"description":"Compile using a remote version instead of the current one, for example: 'latest' or 'v0.4.3+commit.2353da71'"},"solidity.compileUsingLocalVersion":{"type":["string","null"],"default":null,"description":"Compile using a local version instead of the current one, for example: 'C://v0.4.3+commit.2353da71.js'"},"solidity.linter":{"type":["boolean","string"],"default":"solium","description":"Enables solhint linting. Possible options 'solhint' and 'solium'"},"solidity.solhintRules":{"type":["object"],"default":null,"description":"Solhint linting validation rules"},"solidity.enabledSolium":{"type":["boolean"],"default":false,"description":"Enables solium linting. DEPRECATED: Use \"linter\" instead"},"solidity.soliumRules":{"type":["object"],"default":{"array-declarations":true,"blank-lines":false,"camelcase":true,"deprecated-suicide":true,"double-quotes":true,"imports-on-top":true,"indentation":false,"lbrace":true,"mixedcase":true,"no-empty-blocks":true,"no-unused-vars":true,"no-with":true,"operator-whitespace":true,"pragma-on-top":true,"uppercase":true,"variable-declarations":true,"whitespace":true},"description":"Solium linting validation rules"},"solidity.enabledAsYouTypeCompilationErrorCheck":{"type":["boolean"],"default":true,"description":"Enables as you type compilation of the document and error highlighting"},"solidity.validationDelay":{"type":["number"],"default":1500,"description":"Delay to trigger the validation of the changes of the current document (compilation, solium)"}}},"languages":[{"id":"solidity","aliases":["Solidity","solidity"],"extensions":[".sol"],"configuration":"./solidity.configuration.json"}],"commands":[{"command":"solidity.compile","title":"Solidity: Compile All Solidity Contracts"},{"command":"solidity.compile.active","title":"Solidity: Compile Current Solidity Contract"},{"command":"solidity.codegen","title":"Solidity: Code generate from compilation output 'contract.json'"}],"keybindings":[{"command":"solidity.compile.active","key":"f5","mac":"f5","when":"editorTextFocus && editorLangId == 'solidity'"},{"command":"solidity.compile","key":"Ctrl+f5","mac":"Cmd+f5","when":"editorTextFocus && editorLangId == 'solidity'"}],"snippets":[{"language":"solidity","path":"./snippets/solidity.json"}],"grammars":[{"language":"solidity","scopeName":"source.solidity","path":"./syntaxes/solidity.json"}]},"uuid":"25baab03-fe9a-40c7-b683-55c9a0a92480","isBuiltin":false,"id":"JuanBlanco.solidity","extensionFolderPath":"/home/rendani/.vscode/extensions/JuanBlanco.solidity-0.0.31"},{"name":"npm-intellisense","displayName":"npm Intellisense","description":"Visual Studio Code plugin that autocompletes npm modules in import statements","version":"1.3.0","publisher":"christian-kohler","engines":{"vscode":"^1.0.0"},"homepage":"https://github.com/ChristianKohler/NpmIntellisense","repository":{"type":"git","url":"https://github.com/ChristianKohler/NpmIntellisense.git"},"categories":["Other"],"activationEvents":["onLanguage:typescript","onLanguage:javascript","onLanguage:javascriptreact","onLanguage:typescriptreact","onCommand:npm-intellisense.import"],"contributes":{"configuration":{"type":"object","title":"npm-intellisense","properties":{"npm-intellisense.scanDevDependencies":{"type":"boolean","default":false,"description":"Scans devDependencies as well"},"npm-intellisense.recursivePackageJsonLookup":{"type":"boolean","default":true,"description":"Look for package.json inside nearest directory instead of workspace root"},"npm-intellisense.packageSubfoldersIntellisense":{"type":"boolean","default":false,"description":"(experimental) Enables path intellisense in subfolders of modules"},"npm-intellisense.showBuildInLibs":{"type":"boolean","default":false,"description":"shows build in node modules like 'path' of 'fs'"},"npm-intellisense.importES6":{"type":"boolean","default":true,"description":"For import command. Use import statements instead of require()"},"npm-intellisense.importQuotes":{"type":"string","default":"'","description":"For import command. The type of quotes to use in the snippet"},"npm-intellisense.importLinebreak":{"type":"string","default":";\r\n","description":"For import command. The linebreak used after the snippet"},"npm-intellisense.importDeclarationType":{"type":"string","default":"const","description":"For import command. The declaration type used for require()"}}},"commands":[{"command":"npm-intellisense.import","title":"NPM Intellisense: Import module"}]},"icon":"images/icon.png","main":"/home/rendani/.vscode/extensions/christian-kohler.npm-intellisense-1.3.0/out/src/extension","scripts":{"vscode:prepublish":"node ./node_modules/vscode/bin/compile","compile":"node ./node_modules/vscode/bin/compile -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"typescript":"^1.8.5","vscode":"^0.11.0"},"uuid":"dff6b801-247e-40e9-82e8-8c9b1d19d1b8","isBuiltin":false,"id":"christian-kohler.npm-intellisense","extensionFolderPath":"/home/rendani/.vscode/extensions/christian-kohler.npm-intellisense-1.3.0"},{"name":"angular2-snippets","publisher":"danwahlin","displayName":"Angular 5 and TypeScript/HTML VS Code Snippets","description":"VS Code snippets for Angular (v2 or higher) and TypeScript/HTML","icon":"images/angularSnippets.png","repository":{"type":"git","url":"https://github.com/danwahlin/angular-snippets.git"},"galleryBanner":{"color":"#0150B1","theme":"dark"},"version":"1.0.17","engines":{"vscode":"0.10.x"},"categories":["Snippets"],"keywords":["Angular","TypeScript","HTML","Angular 2"],"contributes":{"snippets":[{"language":"typescript","path":"./snippets/typescript.json"},{"language":"html","path":"./snippets/html.json"}]},"uuid":"6481d61b-0209-401a-97d8-d5d0efc14efb","isBuiltin":false,"id":"danwahlin.angular2-snippets","extensionFolderPath":"/home/rendani/.vscode/extensions/danwahlin.angular2-snippets-1.0.17"},{"name":"prettier-vscode","displayName":"Prettier - Code formatter","description":"VS Code plugin for prettier/prettier","version":"1.1.2","publisher":"esbenp","author":"Esben Petersen <@esbenp>","galleryBanner":{"color":"#ffe04b","theme":"light"},"homepage":"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode","repository":{"type":"git","url":"https://github.com/prettier/prettier-vscode.git"},"license":"MIT","bugs":{"url":"https://github.com/prettier/prettier-vscode/issues"},"engines":{"vscode":"^1.17.0"},"keywords":["multi-root ready"],"categories":["Formatters"],"activationEvents":["*"],"icon":"icon.png","main":"/home/rendani/.vscode/extensions/esbenp.prettier-vscode-1.1.2/out/src/extension","contributes":{"configuration":{"type":"object","title":"Prettier - Code formatter configuration","properties":{"prettier.disableLanguages":{"type":"array","items":{"type":"string"},"default":[],"description":"A list of languages IDs to disable this extension on","scope":"resource"},"prettier.eslintIntegration":{"type":"boolean","default":false,"description":"Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.","scope":"resource"},"prettier.stylelintIntegration":{"type":"boolean","default":false,"description":"Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.","scope":"resource"},"prettier.requireConfig":{"type":"boolean","default":false,"description":"Require a 'prettierconfig' to format","scope":"resource"},"prettier.ignorePath":{"type":"string","default":".prettierignore","description":"Path to a .prettierignore or similar file","scope":"resource"},"prettier.printWidth":{"type":"integer","default":80,"description":"Fit code within this line limit","scope":"resource"},"prettier.tabWidth":{"type":"integer","default":2,"description":"Number of spaces it should use per tab","scope":"resource"},"prettier.singleQuote":{"type":"boolean","default":false,"description":"If true, will use single instead of double quotes","scope":"resource"},"prettier.trailingComma":{"type":"string","enum":["none","es5","all"],"default":"none","description":"Controls the printing of trailing commas wherever possible.\n Valid options:\n    'none' - No trailing commas\n    'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)\n    'all' - Trailing commas wherever possible (function arguments)","scope":"resource"},"prettier.bracketSpacing":{"type":"boolean","default":true,"description":"Controls the printing of spaces inside object literals","scope":"resource"},"prettier.jsxBracketSameLine":{"type":"boolean","default":false,"description":"If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line","scope":"resource"},"prettier.parser":{"type":"string","enum":["babylon","flow"],"default":"babylon","description":"Override the parser. You shouldn't have to change this setting.","scope":"resource"},"prettier.semi":{"type":"boolean","default":true,"description":"Whether to add a semicolon at the end of every line","scope":"resource"},"prettier.useTabs":{"type":"boolean","default":false,"description":"Indent lines with tabs","scope":"resource"},"prettier.proseWrap":{"type":"string","enum":["preserve","always","never"],"default":"preserve","description":"(Markdown) wrap prose over multiple lines"},"prettier.arrowParens":{"type":"string","enum":["avoid","always"],"default":"avoid","description":"Include parentheses around a sole arrow function parameter","scope":"resource"}}},"jsonValidation":[{"fileMatch":".prettierrc","url":"http://json.schemastore.org/prettierrc"},{"fileMatch":".prettierrc.json","url":"http://json.schemastore.org/prettierrc"}],"languages":[{"id":"json","filenames":[".prettierrc"]}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install","test":"cross-env CODE_TESTS_WORKSPACE=testWorkspace.code-workspace node ./node_modules/vscode/bin/test","version":"node ./scripts/version.js && git add CHANGELOG.md"},"devDependencies":{"@types/mocha":"^2.2.44","@types/node":"^7.0.48","cross-env":"^5.1.1","mocha":"^3.5.3","typescript":"^2.6.2","vscode":"^1.1.10"},"dependencies":{"ignore":"^3.3.7","prettier":"1.10.2","prettier-eslint":"^8.3.1","prettier-stylelint":"^0.4.1","read-pkg-up":"2.0.0"},"uuid":"96fa4707-6983-4489-b7c5-d5ffdfdcce90","isBuiltin":false,"id":"esbenp.prettier-vscode","extensionFolderPath":"/home/rendani/.vscode/extensions/esbenp.prettier-vscode-1.1.2"},{"name":"node-module-intellisense","displayName":"Node.js Modules Intellisense","description":"Autocompletes Node.js modules in import statements","version":"1.5.0","publisher":"leizongmin","repository":{"type":"git","url":"https://github.com/leizongmin/vscode-node-module-intellisense.git"},"license":"MIT","bugs":{"url":"https://github.com/leizongmin/vscode-node-module-intellisense/issues"},"homepage":"https://github.com/leizongmin/vscode-node-module-intellisense#readme","engines":{"vscode":"^1.5.0"},"categories":["Other","Languages"],"activationEvents":["onLanguage:javascript","onLanguage:javascriptreact","onLanguage:typescript","onLanguage:typescriptreact","onLanguage:html"],"main":"/home/rendani/.vscode/extensions/leizongmin.node-module-intellisense-1.5.0/out/src/extension","icon":"images/icon.png","contributes":{"configuration":{"type":"object","title":"node-module-intellisense","properties":{"node-module-intellisense.scanBuiltinModules":{"type":"boolean","default":true,"description":"Scans builtin modules as well"},"node-module-intellisense.scanDevDependencies":{"type":"boolean","default":true,"description":"Scans devDependencies as well"},"node-module-intellisense.scanFileModules":{"type":"boolean","default":true,"description":"Scans file modules as well"},"node-module-intellisense.autoStripExtensions":{"type":"array","default":[".js",".jsx",".ts",".d.ts",".tsx"],"description":"Auto strip module extensions"},"node-module-intellisense.modulePaths":{"type":"array","default":[],"description":"Module Paths to scan. Use ${workspaceRoot} for workspace lookup."}}}},"scripts":{"clean":"rm -rf out","vscode:prepublish":"npm run clean && tsc -p ./","compile":"npm run clean && tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"@types/mocha":"^2.2.44","@types/node":"^6.0.93","@types/resolve":"0.0.4","mocha":"^2.3.3","typescript":"^2.6.2","vscode":"^1.1.10"},"dependencies":{},"uuid":"1bb92b2c-526c-4bfd-bb38-5bae1b278c89","isBuiltin":false,"id":"leizongmin.node-module-intellisense","extensionFolderPath":"/home/rendani/.vscode/extensions/leizongmin.node-module-intellisense-1.5.0"},{"name":"csharp","publisher":"ms-vscode","version":"1.13.1","description":"C# for Visual Studio Code (powered by OmniSharp).","displayName":"C#","author":"Microsoft Corporation","license":"SEE LICENSE IN RuntimeLicenses/license.txt","icon":"images/csharpIcon.png","preview":true,"bugs":{"url":"https://github.com/OmniSharp/omnisharp-vscode/issues"},"repository":{"type":"git","url":"https://github.com/OmniSharp/omnisharp-vscode.git"},"categories":["Debuggers","Languages","Linters","Snippets"],"keywords":["multi-root ready"],"main":"/home/rendani/.vscode/extensions/ms-vscode.csharp-1.13.1/out/src/main","scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -p ./ && gulp tslint","watch":"tsc -watch -p ./","test":"npm-run-all test:unit","old-test":"npm-run-all test:unit test:integration","test:unit":"cross-env CODE_VERSION=1.17.2 CODE_TESTS_PATH=./out/test/unitTests npm run test:runInVsCode","test:integration":"npm-run-all test:integration:*","test:integration:singleCsproj":"cross-env OSVC_SUITE=singleCsproj npm run test:runSuiteInVsCode","test:integration:slnWithCsproj":"cross-env OSVC_SUITE=slnWithCsproj npm run test:runSuiteInVsCode","test:runSuiteInVsCode":"cross-env CODE_TESTS_PATH=./out/test/integrationTests CODE_TESTS_WORKSPACE=./test/integrationTests/testAssets/$OSVC_SUITE npm run test:runInVsCode","test:runInVsCode":"node ./test/runVsCodeTestsWithAbsolutePaths.js","postinstall":"node ./node_modules/vscode/bin/install"},"dependencies":{"fs-extra":"^4.0.2","http-proxy-agent":"^1.0.0","https-proxy-agent":"^1.0.0","jsonc-parser":"^0.3.0","lodash.debounce":"^4.0.8","mkdirp":"^0.5.1","open":"*","request-light":"^0.2.0","semver":"*","tmp":"0.0.28","vscode-debugprotocol":"^1.6.1","vscode-extension-telemetry":"0.0.8","yauzl":"^2.5.0"},"devDependencies":{"@types/chai":"^3.4.34","@types/chai-arrays":"^1.0.2","@types/fs-extra":"4.0.3","@types/mkdirp":"^0.3.29","@types/mocha":"^2.2.32","@types/node":"^6.0.40","@types/semver":"^5.3.30","@types/tmp":"0.0.32","async-file":"^2.0.2","chai":"^3.5.0","chai-arrays":"^2.0.0","chai-fs":"^1.0.0","cross-env":"^5.1.1","del":"^2.0.2","gulp":"^3.9.1","gulp-mocha":"^2.1.3","gulp-tslint":"^4.3.0","mocha":"^2.3.3","npm-run-all":"^4.1.1","plist":"^2.0.1","tslint":"^3.15.1","tslint-microsoft-contrib":"^2.0.12","typescript":"^2.0.3","vsce":"^1.32.0","vscode":"^1.1.6"},"runtimeDependencies":[{"description":"OmniSharp for Windows (.NET 4.6 / x86)","url":"https://download.visualstudio.microsoft.com/download/pr/100289212/cb0a3e095c35b20ec3100aafd19a9983/omnisharp-win-x86-1.26.3.zip","fallbackUrl":"https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x86-1.26.3.zip","installPath":".omnisharp","platforms":["win32"],"architectures":["x86"],"installTestPath":"./.omnisharp/OmniSharp.exe"},{"description":"OmniSharp for Windows (.NET 4.6 / x64)","url":"https://download.visualstudio.microsoft.com/download/pr/100289206/6804914e838d1af6e5df6b2d9319834d/omnisharp-win-x64-1.26.3.zip","fallbackUrl":"https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x64-1.26.3.zip","installPath":".omnisharp","platforms":["win32"],"architectures":["x86_64"],"installTestPath":"./.omnisharp/OmniSharp.exe"},{"description":"OmniSharp for OSX","url":"https://download.visualstudio.microsoft.com/download/pr/100289205/e47f23ca6966f4d1e47a11028cef4175/omnisharp-osx-1.26.3.zip","fallbackUrl":"https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-osx-1.26.3.zip","installPath":".omnisharp","platforms":["darwin"],"binaries":["./mono.osx","./run"],"installTestPath":"./.omnisharp/mono.osx"},{"description":"OmniSharp for Linux (x86)","url":"https://download.visualstudio.microsoft.com/download/pr/100289203/653d27633adabf5ed59e0a1dc7b6fdfb/omnisharp-linux-x86-1.26.3.zip","fallbackUrl":"https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-linux-x86-1.26.3.zip","installPath":".omnisharp","platforms":["linux"],"architectures":["x86","i686"],"binaries":["./mono.linux-x86","./run"],"installTestPath":"./.omnisharp/mono.linux-x86"},{"description":"OmniSharp for Linux (x64)","url":"https://download.visualstudio.microsoft.com/download/pr/100289202/fd9d78a814c0fbd892c0f9f97bca6d0a/omnisharp-linux-x64-1.26.3.zip","fallbackUrl":"https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-linux-x64-1.26.3.zip","installPath":".omnisharp","platforms":["linux"],"architectures":["x86_64"],"binaries":["./mono.linux-x86_64","./run"],"installTestPath":"./.omnisharp/mono.linux-x86_64"},{"description":".NET Core Debugger (Windows / x64)","url":"https://download.visualstudio.microsoft.com/download/pr/11121545/61b8ee7aa56d99502a7ae3a19547e73b/coreclr-debug-win7-x64.zip","fallbackUrl":"https://vsdebugger.blob.core.windows.net/coreclr-debug-1-13-0/coreclr-debug-win7-x64.zip","installPath":".debugger","platforms":["win32"],"architectures":["x86_64"],"installTestPath":"./.debugger/vsdbg-ui.exe"},{"description":".NET Core Debugger (macOS / x64)","url":"https://download.visualstudio.microsoft.com/download/pr/11121545/61b8ee7aa56d99502a7ae3a19547e73b/coreclr-debug-osx.10.11-x64.zip","fallbackUrl":"https://vsdebugger.blob.core.windows.net/coreclr-debug-1-13-0/coreclr-debug-osx.10.11-x64.zip","installPath":".debugger","platforms":["darwin"],"architectures":["x86_64"],"binaries":["./vsdbg-ui","./vsdbg"],"installTestPath":"./.debugger/vsdbg-ui"},{"description":".NET Core Debugger (linux / x64)","url":"https://download.visualstudio.microsoft.com/download/pr/11121545/61b8ee7aa56d99502a7ae3a19547e73b/coreclr-debug-linux-x64.zip","fallbackUrl":"https://vsdebugger.blob.core.windows.net/coreclr-debug-1-13-0/coreclr-debug-linux-x64.zip","installPath":".debugger","platforms":["linux"],"architectures":["x86_64"],"binaries":["./vsdbg-ui","./vsdbg"],"installTestPath":"./.debugger/vsdbg-ui"}],"engines":{"vscode":"^1.17.0"},"activationEvents":["onDebug","onLanguage:csharp","onCommand:o.restart","onCommand:o.pickProjectAndStart","onCommand:o.showOutput","onCommand:dotnet.restore","onCommand:dotnet.generateAssets","onCommand:csharp.downloadDebugger","onCommand:csharp.listProcess","onCommand:csharp.listRemoteProcess","workspaceContains:project.json","workspaceContains:*.csproj","workspaceContains:*.sln","workspaceContains:*.csx","workspaceContains:*.cake","workspaceContains:**/*.csproj","workspaceContains:**/*.sln","workspaceContains:**/*.csx","workspaceContains:**/*.cake"],"contributes":{"configuration":{"title":"C# configuration","properties":{"csharp.format.enable":{"type":"boolean","default":true,"description":"Enable/disable default C# formatter (requires restart)."},"csharp.suppressDotnetInstallWarning":{"type":"boolean","default":false,"description":"Suppress the warning that the .NET CLI is not on the path."},"csharp.unitTestDebuggingOptions":{"type":"object","description":"Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.","default":{},"properties":{"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'","additionalProperties":{"type":"string"},"default":{"<insert-source-path-here>":"<insert-target-path-here>"}},"justMyCode":{"type":"boolean","description":"Optional flag to only show user code.","default":true},"symbolPath":{"type":"array","description":"Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]","items":{"type":"string"},"default":[]},"requireExactSource":{"type":"boolean","description":"Optional flag to require current source code to match the pdb.","default":true},"enableStepFiltering":{"type":"boolean","description":"Optional flag to enable stepping over Properties and Operators.","default":true},"debugServer":{"type":"number","description":"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode","default":4711},"logging":{"description":"Optional flags to determine what types of messages should be logged to the output window.","type":"object","required":[],"default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the output window.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the output window.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the output window when not using an external console.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the output window.","default":false},"browserStdOut":{"type":"boolean","description":"Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.","default":true}}},"type":{"type":"string","enum":["coreclr","clr"],"description":"Type type of code to debug. Can be either 'coreclr' for .NET Core debugging, or 'clr' for Desktop .NET Framework. 'clr' only works on Windows as the Desktop framework is Windows-only.","default":"coreclr"}}},"csharp.suppressDotnetRestoreNotification":{"type":"boolean","default":false,"description":"Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved."},"csharp.suppressHiddenDiagnostics":{"type":"boolean","default":true,"description":"Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane."},"csharp.referencesCodeLens.enabled":{"type":"boolean","default":true,"description":"Specifies whether the references CodeLens should be show be shown."},"csharp.testsCodeLens.enabled":{"type":"boolean","default":true,"description":"Specifies whether the run and debug test CodeLens should be show be shown."},"omnisharp.path":{"type":["string","null"],"default":null,"description":"Specifies the full path to the OmniSharp server."},"omnisharp.useMono":{"type":"boolean","default":false,"description":"Launch OmniSharp with Mono."},"omnisharp.waitForDebugger":{"type":"boolean","default":false,"description":"Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached."},"omnisharp.loggingLevel":{"type":"string","default":"information","enum":["trace","debug","information","warning","error","critical"],"description":"Specifies the level of logging output from the OmniSharp server."},"omnisharp.autoStart":{"type":"boolean","default":true,"description":"Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command"},"omnisharp.projectLoadTimeout":{"type":"number","default":60,"description":"The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds."},"omnisharp.maxProjectResults":{"type":"number","default":250,"description":"The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250)."},"omnisharp.useEditorFormattingSettings":{"type":"boolean","default":true,"description":"Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size)."}}},"jsonValidation":[{"fileMatch":"project.json","url":"http://json.schemastore.org/project"},{"fileMatch":"omnisharp.json","url":"http://json.schemastore.org/omnisharp"}],"commands":[{"command":"o.restart","title":"Restart OmniSharp","category":"OmniSharp"},{"command":"o.pickProjectAndStart","title":"Select Project","category":"OmniSharp"},{"command":"dotnet.generateAssets","title":"Generate Assets for Build and Debug","category":".NET"},{"command":"dotnet.restore","title":"Restore Packages","category":".NET"},{"command":"csharp.downloadDebugger","title":"Download .NET Core Debugger","category":"Debug"},{"command":"csharp.listProcess","title":"List process for attach","category":"CSharp"},{"command":"csharp.listRemoteProcess","title":"List processes on remote connection for attach","category":"CSharp"}],"keybindings":[{"command":"o.showOutput","key":"Ctrl+L L","mac":"Cmd+L L"}],"snippets":[{"language":"csharp","path":"./snippets/csharp.json"}],"debuggers":[{"type":"coreclr","label":".NET Core","enableBreakpointsFor":{"languageIds":["csharp","razor"]},"runtime":"node","runtimeArgs":[],"variables":{"pickProcess":"csharp.listProcess","pickRemoteProcess":"csharp.listRemoteProcess"},"program":"./out/src/coreclr-debug/proxy.js","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"launch":{"type":"object","required":["program"],"properties":{"program":{"type":"string","description":"Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\nExample: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\n\nWhere:\n(target-framework) is the framework that the debugged project is being built for. This is normally found in the project file as the 'TargetFramework' property.\n(project-name.dll) is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.","default":"${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"},"cwd":{"type":"string","description":"Path to the working directory of the program being debugged. Default is the current workspace.","default":"${workspaceFolder}"},"args":{"anyOf":[{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the program.","default":""}]},"stopAtEntry":{"type":"boolean","description":"If true, the debugger should stop at the entry point of the target.","default":false},"launchBrowser":{"description":"Describes options to launch a web browser as part of launch","default":{"enabled":true,"args":"${auto-detect-url}","windows":{"command":"cmd.exe","args":"/C start ${auto-detect-url}"},"osx":{"command":"open"},"linux":{"command":"xdg-open"}},"type":"object","properties":{"enabled":{"type":"boolean","description":"Whether web browser launch is enabled","default":true},"args":{"anyOf":[{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the program.","default":""}],"default":"${auto-detect-url}"},"osx":{"description":"OSX-specific web launch configuration options","default":{"command":"open"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"open"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}},"linux":{"description":"Linux-specific web launch configuration options","default":{"command":"xdg-open"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"xdg-open"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}},"windows":{"description":"Windows-specific web launch configuration options","default":{"command":"cmd.exe","args":"/C start ${auto-detect-url}"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"cmd.exe"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}}}},"env":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{}},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"description":"Where to launch the debug target.","default":"internalConsole"},"externalConsole":{"type":"boolean","description":"Attribute 'externalConsole' is deprecated, use 'console' instead.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'","additionalProperties":{"type":"string"},"default":{"<insert-source-path-here>":"<insert-target-path-here>"}},"justMyCode":{"type":"boolean","description":"Optional flag to only show user code.","default":true},"symbolPath":{"type":"array","description":"Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]","items":{"type":"string"},"default":[]},"requireExactSource":{"type":"boolean","description":"Optional flag to require current source code to match the pdb.","default":true},"enableStepFiltering":{"type":"boolean","description":"Optional flag to enable stepping over Properties and Operators.","default":true},"logging":{"description":"Optional flags to determine what types of messages should be logged to the output window.","type":"object","required":[],"default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the output window.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the output window.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the output window when not using an external console.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the output window.","default":false},"browserStdOut":{"type":"boolean","description":"Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.","default":true}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).","type":"object","required":["debuggerPath"],"default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine.","default":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"windows":{"description":"Windows-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"osx":{"description":"OSX-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"linux":{"description":"Linux-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}}}}}},"attach":{"type":"object","required":[],"properties":{"processName":{"type":"string","description":"","default":"The process name to attach to. If this is used, 'processId' should not be used."},"processId":{"anyOf":[{"type":"string","description":"The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.","default":"${command:pickProcess}"},{"type":"integer","description":"The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.","default":0}]},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'","additionalProperties":{"type":"string"},"default":{"<insert-source-path-here>":"<insert-target-path-here>"}},"justMyCode":{"type":"boolean","description":"Optional flag to only show user code.","default":true},"symbolPath":{"type":"array","description":"Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]","items":{"type":"string"},"default":[]},"requireExactSource":{"type":"boolean","description":"Optional flag to require current source code to match the pdb.","default":true},"enableStepFiltering":{"type":"boolean","description":"Optional flag to enable stepping over Properties and Operators.","default":true},"logging":{"description":"Optional flags to determine what types of messages should be logged to the output window.","type":"object","required":[],"default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the output window.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the output window.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the output window when not using an external console.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the output window.","default":false},"browserStdOut":{"type":"boolean","description":"Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.","default":true}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).","type":"object","required":["debuggerPath"],"default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine.","default":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"windows":{"description":"Windows-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"osx":{"description":"OSX-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"linux":{"description":"Linux-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}}}}}}},"configurationSnippets":[{"label":".NET: Launch .NET Core Console App","description":"Launch a .NET Core Console App with a debugger.","body":{"name":".NET Core Launch (console)","type":"coreclr","request":"launch","preLaunchTask":"build","program":"^\"\\${workspaceRoot}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"","args":[],"cwd":"^\"\\${workspaceRoot}\"","stopAtEntry":false,"console":"internalConsole"}},{"label":".NET: Attach to local .NET Core Console App","description":"Attach a debugger to a .NET Core Console App.","body":{"name":".NET Core Attach","type":"coreclr","request":"attach","processId":"^\"\\${command:pickProcess}\""}},{"label":".NET: Launch a local .NET Core Web App","description":"Launch a .NET Core Web App with both a browser and a debugger.","body":{"name":".NET Core Launch (web)","type":"coreclr","request":"launch","preLaunchTask":"build","program":"^\"\\${workspaceRoot}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"","args":[],"cwd":"^\"\\${workspaceRoot}\"","stopAtEntry":false,"launchBrowser":{"enabled":true,"args":"^\"\\${auto-detect-url}\"","windows":{"command":"cmd.exe","args":"^\"/C start \\${auto-detect-url}\""},"osx":{"command":"open"},"linux":{"command":"xdg-open"}},"env":{"ASPNETCORE_ENVIRONMENT":"Development"},"sourceFileMap":{"/Views":"^\"\\${workspaceRoot}/Views\""}}},{"label":".NET: Launch a remote .NET Core Console App","description":"Launch a .NET Core Console App on a remote machine.","body":{"name":".NET Core Launch (console)","type":"coreclr","request":"launch","preLaunchTask":"build","program":"^\"\\${workspaceRoot}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"","args":[],"cwd":"^\"\\${workspaceRoot}\"","stopAtEntry":false,"console":"internalConsole","pipeTransport":{"pipeCwd":"^\"\\${workspaceRoot}\"","pipeProgram":"^\"${3:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"","pipeArgs":[],"debuggerPath":"^\"${4:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""}}},{"label":".NET: Attach to remote .NET Core Console App","description":"Attach a debugger to a .NET Core Console App on a remote machine.","body":{"name":".NET Core Attach","type":"coreclr","request":"attach","processId":"^\"\\${command:pickRemoteProcess}\"","pipeTransport":{"pipeCwd":"^\"\\${workspaceRoot}\"","pipeProgram":"^\"${1:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"","pipeArgs":[],"debuggerPath":"^\"${2:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""}}}]},{"type":"clr","label":".NET","enableBreakpointsFor":{"languageIds":["csharp","razor"]},"runtime":"node","runtimeArgs":[],"variables":{"pickProcess":"csharp.listProcess","pickRemoteProcess":"csharp.listRemoteProcess"},"program":"./out/src/coreclr-debug/proxy.js","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"launch":{"type":"object","required":["program"],"properties":{"program":{"type":"string","description":"Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\nExample: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\n\nWhere:\n(target-framework) is the framework that the debugged project is being built for. This is normally found in the project file as the 'TargetFramework' property.\n(project-name.dll) is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.","default":"${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"},"cwd":{"type":"string","description":"Path to the working directory of the program being debugged. Default is the current workspace.","default":"${workspaceFolder}"},"args":{"anyOf":[{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the program.","default":""}]},"stopAtEntry":{"type":"boolean","description":"If true, the debugger should stop at the entry point of the target.","default":false},"launchBrowser":{"description":"Describes options to launch a web browser as part of launch","default":{"enabled":true,"args":"${auto-detect-url}","windows":{"command":"cmd.exe","args":"/C start ${auto-detect-url}"},"osx":{"command":"open"},"linux":{"command":"xdg-open"}},"type":"object","properties":{"enabled":{"type":"boolean","description":"Whether web browser launch is enabled","default":true},"args":{"anyOf":[{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the program.","default":""}],"default":"${auto-detect-url}"},"osx":{"description":"OSX-specific web launch configuration options","default":{"command":"open"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"open"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}},"linux":{"description":"Linux-specific web launch configuration options","default":{"command":"xdg-open"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"xdg-open"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}},"windows":{"description":"Windows-specific web launch configuration options","default":{"command":"cmd.exe","args":"/C start ${auto-detect-url}"},"type":"object","properties":{"command":{"type":"string","description":"The command to execute for launching the web browser","default":"cmd.exe"},"args":{"type":"string","description":"The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to","default":"${auto-detect-url}"}}}}},"env":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{}},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"description":"Where to launch the debug target.","default":"internalConsole"},"externalConsole":{"type":"boolean","description":"Attribute 'externalConsole' is deprecated, use 'console' instead.","default":false},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'","additionalProperties":{"type":"string"},"default":{"<insert-source-path-here>":"<insert-target-path-here>"}},"justMyCode":{"type":"boolean","description":"Optional flag to only show user code.","default":true},"symbolPath":{"type":"array","description":"Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]","items":{"type":"string"},"default":[]},"requireExactSource":{"type":"boolean","description":"Optional flag to require current source code to match the pdb.","default":true},"enableStepFiltering":{"type":"boolean","description":"Optional flag to enable stepping over Properties and Operators.","default":true},"logging":{"description":"Optional flags to determine what types of messages should be logged to the output window.","type":"object","required":[],"default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the output window.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the output window.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the output window when not using an external console.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the output window.","default":false},"browserStdOut":{"type":"boolean","description":"Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.","default":true}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).","type":"object","required":["debuggerPath"],"default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine.","default":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"windows":{"description":"Windows-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"osx":{"description":"OSX-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"linux":{"description":"Linux-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}}}}}},"attach":{"type":"object","required":[],"properties":{"processName":{"type":"string","description":"","default":"The process name to attach to. If this is used, 'processId' should not be used."},"processId":{"anyOf":[{"type":"string","description":"The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.","default":"${command:pickProcess}"},{"type":"integer","description":"The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.","default":0}]},"sourceFileMap":{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'","additionalProperties":{"type":"string"},"default":{"<insert-source-path-here>":"<insert-target-path-here>"}},"justMyCode":{"type":"boolean","description":"Optional flag to only show user code.","default":true},"symbolPath":{"type":"array","description":"Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]","items":{"type":"string"},"default":[]},"requireExactSource":{"type":"boolean","description":"Optional flag to require current source code to match the pdb.","default":true},"enableStepFiltering":{"type":"boolean","description":"Optional flag to enable stepping over Properties and Operators.","default":true},"logging":{"description":"Optional flags to determine what types of messages should be logged to the output window.","type":"object","required":[],"default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the output window.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the output window.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the output window when not using an external console.","default":true},"engineLogging":{"type":"boolean","description":"Optional flag to determine whether diagnostic engine logs should be logged to the output window.","default":false},"browserStdOut":{"type":"boolean","description":"Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.","default":true}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).","type":"object","required":["debuggerPath"],"default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[],"debuggerPath":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine.","default":"enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"windows":{"description":"Windows-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"osx":{"description":"OSX-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}},"linux":{"description":"Linux-specific pipe launch configuration options","default":{"pipeCwd":"${workspaceFolder}","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'","pipeArgs":[]},"type":"object","properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"${workspaceFolder}"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"},"pipeArgs":{"anyOf":[{"type":"array","description":"Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","items":{"type":"string"},"default":[]},{"type":"string","description":"Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.","default":""}],"default":[]},"quoteArgs":{"type":"boolean","description":"Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.","default":true},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}}}}}}}}}}]},"uuid":"d0bfc4ab-1d3a-4487-8782-7cf6027b4fff","isBuiltin":false,"id":"ms-vscode.csharp","extensionFolderPath":"/home/rendani/.vscode/extensions/ms-vscode.csharp-1.13.1"},{"name":"debugger-for-chrome","displayName":"Debugger for Chrome","version":"4.1.0","icon":"images/icon.png","description":"Debug your JavaScript code in the Chrome browser, or any other target that supports the Chrome Debugger protocol.","author":{"name":"Microsoft Corporation"},"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-chrome-debug"},"publisher":"msjsdiag","bugs":"https://github.com/microsoft/vscode-chrome-debug/issues","engines":{"vscode":"^1.17.0"},"categories":["Debuggers"],"keywords":["multi-root ready"],"license":"SEE LICENSE IN LICENSE.txt","dependencies":{"vscode-chrome-debug-core":"^3.22.4","vscode-debugadapter":"^1.26.0-pre.2","vscode-nls":"https://registry.npmjs.org/vscode-nls/-/vscode-nls-2.0.2.tgz"},"devDependencies":{"@types/mocha":"^2.2.35","@types/mockery":"^1.4.29","@types/node":"^6.0.41","@types/source-map":"^0.1.27","@types/tmp":"0.0.32","concurrently":"^3.1.0","event-stream":"^3.3.4","glob":"^7.1.1","gulp":"^3.9.1","gulp-sourcemaps":"^2.6.1","gulp-typescript":"^3.2.3","gulp-util":"^3.0.8","http-server":"^0.10.0","mocha":"^3.0.2","mockery":"^1.7.0","run-sequence":"^2.2.0","tmp":"0.0.31","ts-loader":"^1.0.0","tslint":"^3.15.1","typemoq":"^0.3.3","typescript":"^2.4.1","vsce":"^1.32.0","vscode":"^1.0.3","vscode-chrome-debug-core-testsupport":"^3.20.0","vscode-debugadapter-testsupport":"1.24.0","vscode-debugprotocol":"^1.25.0","vscode-nls-dev":"^2.1.5"},"main":"/home/rendani/.vscode/extensions/msjsdiag.debugger-for-chrome-4.1.0/out/src/extension","activationEvents":["onDebug","onCommand:extension.chrome-debug.toggleSkippingFile"],"scripts":{"build":"gulp build","watch":"gulp watch","start":"node out/src/chromeDebug.js --server=4712","test":"mocha --timeout 20000 -s 2000 -u tdd --colors \"./out/test/*.test.js\"","intTest":"mocha --timeout 20000 -s 3500 -u tdd --colors --reporter node_modules/vscode-chrome-debug-core-testsupport/out/loggingReporter.js ./out/test/int/*.test.js","lint":"tslint -t verbose \"src/**/*.ts\"","vscode:prepublish":"gulp verify-no-linked-modules","postinstall":"node ./node_modules/vscode/bin/install"},"contributes":{"breakpoints":[{"language":"javascript"},{"language":"typescriptreact"},{"language":"javascriptreact"},{"language":"fsharp"}],"debuggers":[{"type":"chrome","label":"Chrome","program":"./out/src/chromeDebug.js","runtime":"node","aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","languages":["javascript","typescript","javascriptreact","typescriptreact"],"configurationSnippets":[{"label":"Chrome: Launch","description":"Launch Chrome to debug a URL","body":{"type":"chrome","request":"launch","name":"Launch Chrome","url":"http://localhost:8080","webRoot":"^\"${2:\\${workspaceFolder\\}}\""}},{"label":"Chrome: Attach","description":"Attach to an instance of Chrome already in debug mode","body":{"type":"chrome","request":"attach","name":"Attach to Chrome","port":9222,"webRoot":"^\"${2:\\${workspaceFolder\\}}\""}}],"configurationAttributes":{"launch":{"required":[],"properties":{"port":{"type":"number","description":"Port to use for Chrome remote debugging.","default":9222},"address":{"type":"string","description":"TCP/IP address of debug port","default":"127.0.0.1"},"file":{"type":"string","description":"A local html file to open in the browser","default":"${workspaceFolder}/index.html"},"url":{"type":"string","description":"Will search for a tab with this EXACT url and attach to it, if found","default":"http://localhost:8080"},"webRoot":{"type":"string","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","default":"${workspaceFolder}"},"pathMapping":{"type":"object","description":"A mapping of URLs/paths to local folders, to resolve scripts in Chrome to scripts on disk","default":{"/":"${workspaceFolder}"}},"runtimeExecutable":{"type":["string","null"],"description":"Workspace absolute path to the runtime executable to be used. If not specified, Chrome will be used from the default install location.","default":null},"runtimeArgs":{"type":"array","description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"default":[]},"env":{"type":"object","description":"Optional dictionary of environment key/value pairs.","default":{}},"cwd":{"type":"string","description":"Optional working directory for the runtime executable.","default":null},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"diagnosticLogging":{"type":"boolean","description":"When true, the adapter logs its own diagnostic info to the console in a human readable format","default":true,"deprecationMessage":"'diagnosticLogging' is deprecated. Use 'trace' instead."},"verboseDiagnosticLogging":{"type":"boolean","description":"When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')","default":true,"deprecationMessage":"'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."},"trace":{"type":["boolean","string"],"enum":["verbose",true],"default":true,"description":"When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."},"userDataDir":{"type":["string","boolean"],"description":"By default, Chrome is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.","default":""},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.","default":{"webpack:///*":"*","webpack:///./*":"${webRoot}/*","webpack:///src/*":"${webRoot}/*","webpack:///./~/*":"${webRoot}/node_modules/*"}},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":[]},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Chrome. Default is 10000 ms.","default":10000},"disableNetworkCache":{"type":"boolean","description":"Controls whether to skip the network cache for each request","default":true},"urlFilter":{"type":"string","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","default":""},"showAsyncStacks":{"type":"boolean","description":"Show the async calls that led to the current call stack","default":true},"breakOnLoad":{"type":"boolean","description":"%chrome.breakOnLoad.description","default":true},"breakOnLoadStrategy":{"type":"enum","enum":["instrument","regex"],"enumDescriptions":["Tell Chrome to pause as each script is loaded, resolving sourcemaps and setting breakpoints","Sets breakpoints optimistically in files with the same name as the file in which the breakpoint is set."],"description":"%chrome.breakOnLoadStrategy.description","default":"instrument"}}},"attach":{"required":["port"],"properties":{"port":{"type":"number","description":"Port to use for Chrome remote debugging.","default":9222},"address":{"type":"string","description":"TCP/IP address of debug port","default":"127.0.0.1"},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"diagnosticLogging":{"type":"boolean","description":"When true, the adapter logs its own diagnostic info to the console in a human readable format","default":true,"deprecationMessage":"'diagnosticLogging' is deprecated. Use 'trace' instead."},"verboseDiagnosticLogging":{"type":"boolean","description":"When true, the adapter logs all traffic with the client and target (as well as the info logged by 'diagnosticLogging')","default":true,"deprecationMessage":"'verboseDiagnosticLogging' is deprecated. Use 'trace' instead."},"trace":{"type":["boolean","string"],"enum":["verbose",true],"default":true,"description":"When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console."},"url":{"type":"string","description":"Will search for a tab with this EXACT url and attach to it, if found","default":"http://localhost:8080"},"webRoot":{"type":"string","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","default":"${workspaceFolder}"},"pathMapping":{"type":"object","description":"A mapping of URLs/paths to local folders, to resolve scripts in Chrome to scripts on disk","default":{}},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.","default":{}},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":[]},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Chrome. Default is 10000 ms.","default":10000},"disableNetworkCache":{"type":"boolean","description":"Controls whether to skip the network cache for each request","default":true},"urlFilter":{"type":"string","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","default":""},"showAsyncStacks":{"type":"boolean","description":"Show the async calls that led to the current call stack","default":true}}}}}],"menus":{"debug/callstack/context":[{"command":"extension.chrome-debug.toggleSkippingFile","group":"navigation","when":"inDebugMode && debugType == 'chrome'"}]},"commands":[{"command":"extension.chrome-debug.toggleSkippingFile","title":"Toggle Skipping This File"}],"keybindings":[{"command":"extension.node-debug.pickLoadedScript","key":"ctrl+f4","mac":"cmd+f4","when":"debugType == 'chrome'"}]},"uuid":"1ec62ca5-d7f9-4ddb-a882-e8d018c0aefd","isBuiltin":false,"id":"msjsdiag.debugger-for-chrome","extensionFolderPath":"/home/rendani/.vscode/extensions/msjsdiag.debugger-for-chrome-4.1.0"},{"name":"spellchecker","displayName":"SpellChecker","description":"Offline spell checker","version":"1.2.13","publisher":"swyphcosmo","engines":{"vscode":"^1.1.0"},"icon":"images/icon.svg","categories":["Other"],"activationEvents":["*"],"main":"/home/rendani/.vscode/extensions/swyphcosmo.spellchecker-1.2.13/out/src/extension","contributes":{"commands":[{"command":"spellchecker.setLanguage","title":"Set Spell Checker Language"},{"command":"spellchecker.showDocumentType","title":"Show documentType for Current File"},{"command":"spellchecker.checkDocument","title":"Spell Check Current File"}],"keybindings":[{"key":"shift+alt+s","command":"spellchecker.checkDocument","when":"editorTextFocus"}],"configuration":{"properties":{"spellchecker.ignoreWordsList":{"type":"array","default":[],"description":"Array of strings that contain the words that will not be checked by the Spell Checker."},"spellchecker.language":{"type":"string","default":"en_US","description":"Dictionary language. Currently supported: 'en_US', 'en_GB-ise', or 'es_ANY'."},"spellchecker.documentTypes":{"type":"array","default":["markdown","latex","plaintext"],"description":"Array of strings that limit the document types that will be spell checked."},"spellchecker.ignoreFileExtensions":{"type":"array","default":[],"description":"Array of file extensions that will not be spell checked."},"spellchecker.checkInterval":{"type":"integer","default":5000,"description":"Number of milliseconds to delay between full document checks. If set less than zero, the document will never be automatically checked."},"spellchecker.ignoreRegExp":{"type":"array","default":[],"description":"Array of regular expressions that will be used to remove text from the document before it is spell checked."}},"title":"Spell Checker Settings"}},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"typescript":"^2.0.3","vscode":"^1.1.0","@types/node":"^6.0.40","@types/mocha":"^2.2.32"},"dependencies":{"fs":"0.0.1-security","jsonminify":"^0.4.1","mkdirp":"^0.5.1","npm":"^4.0.2","path":"^0.12.7","typescript":"^2.0.3"},"license":"MIT","repository":{"type":"git","url":"https://github.com/swyphcosmo/vscode-spellchecker.git"},"uuid":"0d9c867f-c8bd-44ff-beb2-92dbe7d03aa0","isBuiltin":false,"id":"swyphcosmo.spellchecker","extensionFolderPath":"/home/rendani/.vscode/extensions/swyphcosmo.spellchecker-1.2.13"},{"name":"JavaScriptSnippets","description":"Code snippets for JavaScript in ES6 syntax","version":"1.5.0","displayName":"JavaScript (ES6) code snippets","publisher":"xabikos","icon":"images/javascript.png","license":"SEE LICENSE IN LICENSE.md","repository":{"type":"git","url":"https://github.com/xabikos/vscode-javascript"},"engines":{"vscode":"0.10.x"},"categories":["Snippets"],"contributes":{"snippets":[{"language":"javascript","path":"./snippets/snippets.json"},{"language":"typescript","path":"./snippets/snippets.json"},{"language":"javascriptreact","path":"./snippets/snippets.json"},{"language":"typescriptreact","path":"./snippets/snippets.json"},{"language":"html","path":"./snippets/snippets.json"},{"language":"vue","path":"./snippets/snippets.json"}]},"uuid":"a2cec723-5349-460d-9de9-0fd1f8d3456f","isBuiltin":false,"id":"xabikos.JavaScriptSnippets","extensionFolderPath":"/home/rendani/.vscode/extensions/xabikos.javascriptsnippets-1.5.0"}]}